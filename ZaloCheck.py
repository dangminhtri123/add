import customtkinter as ctk
from tkinter import ttk, filedialog, messagebox
from PIL import Image
import threading
import json
import os
import requests
import re
import base64
import openpyxl
import uuid
from selenium import webdriver

# ---------------------------
# PH·∫¶N ƒêƒÇNG NH·∫¨P (Login)
# ---------------------------

def load_key_from_file():
    """ƒê·ªçc key ƒë√£ l∆∞u t·ª´ file (n·∫øu c√≥)."""
    try:
        with open("key.txt", "r") as f:
            return f.read().strip()
    except Exception:
        return ""

def save_key_to_file(key):
    """Ghi key v√†o file."""
    try:
        with open("key.txt", "w") as f:
            f.write(key)
    except Exception as e:
        print("L·ªói khi l∆∞u key:", e)

def get_mac_address():
    """L·∫•y ƒë·ªãa ch·ªâ MAC c·ªßa m√°y."""
    mac_num = hex(uuid.getnode()).replace("0x", "").upper()
    mac = ":".join(mac_num[i:i+2] for i in range(0, len(mac_num), 2))
    return mac

def copy_to_clipboard(text, window):
    """Copy text v√†o clipboard."""
    window.clipboard_clear()
    window.clipboard_append(text)
    window.update()

def check_key(window=None):
    """H√†m ki·ªÉm tra key b·∫±ng c√°ch g·ªçi API."""
    key = key_entry.get().strip()
    if not key:
        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p key!")
        return

    # L·∫•y th·ªùi gian hi·ªán t·∫°i theo UTC
    current_time = "2025-04-02 07:12:08"  # Th·ªùi gian t·ª´ h·ªá th·ªëng
    user_login = "dangminhtri123"  # User login t·ª´ h·ªá th·ªëng

    url = f"http://14.225.205.195/api.php?key={key}"
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        login_data = response.json()
    except requests.exceptions.RequestException:
        messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß API!")
        return
    except json.JSONDecodeError:
        messagebox.showerror("L·ªói", "D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá!")
        return
    except Exception as e:
        messagebox.showerror("L·ªói", f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
        return

    # Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu API
    if not login_data or not isinstance(login_data, dict):
        messagebox.showerror("L·ªói", "D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá!")
        return

    # Ki·ªÉm tra key c√≥ t·ªìn t·∫°i trong response
    if "key" not in login_data:
        messagebox.showerror("L·ªói", "D·ªØ li·ªáu API thi·∫øu th√¥ng tin key!")
        return

    # Ki·ªÉm tra key h·ª£p l·ªá
    if login_data.get("key") != key:
        messagebox.showerror("L·ªói", "Key kh√¥ng h·ª£p l·ªá!")
        return

    # Ki·ªÉm tra ƒë·ªãa ch·ªâ MAC
    local_mac = get_mac_address()
    if login_data.get("mac") != local_mac:
        error_msg = (
            "Key sai ho·∫∑c ƒë√£ ƒë∆∞·ª£c ƒëƒÉng nh·∫≠p t·∫°i n∆°i kh√°c!\n"
            f"MAC hi·ªán t·∫°i: {local_mac}\n"
            f"MAC ƒëƒÉng k√Ω: {login_data.get('mac', 'Kh√¥ng c√≥')}"
        )
        messagebox.showerror("L·ªói", error_msg)
        return

    # Ki·ªÉm tra tr·∫°ng th√°i Active
    if str(login_data.get("Active")).lower() != "yes":
        messagebox.showerror(
            "L·ªói", 
            "Key ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t!\nVui l√≤ng li√™n h·ªá ADMIN ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£!"
        )
        return

    # Th√™m th√¥ng tin th·ªùi gian v√† user v√†o login_data
    login_data.update({
        "login_time": current_time,
        "user": user_login
    })

    # N·∫øu l∆∞u key ƒë∆∞·ª£c ch·ªçn, l∆∞u v√†o file
    if save_key_var.get():
        try:
            save_key_to_file(key)
        except Exception as e:
            messagebox.showwarning(
                "C·∫£nh b√°o", 
                f"Kh√¥ng th·ªÉ l∆∞u key: {str(e)}\nNh∆∞ng b·∫°n v·∫´n c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng."
            )

    # Th√¥ng b√°o ƒëƒÉng nh·∫≠p th√†nh c√¥ng
    success_msg = (
        "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!\n"
        f"Th·ªùi gian: {current_time}\n"
        f"User: {user_login}\n"
        "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!"
    )
    messagebox.showinfo("Th√¥ng b√°o", success_msg)

    # ·∫®n c·ª≠a s·ªï ƒëƒÉng nh·∫≠p
    if window:
        try:
            window.withdraw()
        except Exception as e:
            print(f"L·ªói khi ·∫©n c·ª≠a s·ªï ƒëƒÉng nh·∫≠p: {e}")
            # Kh√¥ng return ·ªü ƒë√¢y v√¨ kh√¥ng ph·∫£i l·ªói nghi√™m tr·ªçng

    try:
        # Kh·ªüi t·∫°o v√† hi·ªÉn th·ªã giao di·ªán ch√≠nh
        app = MainApp(current_time, login_data)
        app.mainloop()
    except Exception as e:
        messagebox.showerror(
            "L·ªói", 
            f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o giao di·ªán ch√≠nh: {str(e)}"
        )
        if window:
            window.deiconify()  # Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï ƒëƒÉng nh·∫≠p n·∫øu c√≥ l·ªói



# ---------------------------
# PH·∫¶N GIAO DI·ªÜN CH√çNH (ZaloChecker)
# ---------------------------

# M·∫∑c ƒë·ªãnh ORIGINAL_COOKIE v√† ORIGINAL_TOKEN l√† tr·ªëng
ORIGINAL_COOKIE = ""
ORIGINAL_TOKEN = ""

# Global c·∫•u h√¨nh proxy
USE_PROXY = False
PROXIES = []       # Danh s√°ch proxy d·∫°ng chu·ªói "ip:port:user:pass"
PROXY_INDEX = 0    # Ch·ªâ s·ªë proxy hi·ªán t·∫°i

def get_next_proxy():
    """Tr·∫£ v·ªÅ proxy d∆∞·ªõi d·∫°ng dict cho requests v√† c·∫≠p nh·∫≠t ch·ªâ s·ªë v√≤ng l·∫∑p."""
    global PROXIES, PROXY_INDEX
    if not PROXIES:
        return None
    proxy_line = PROXIES[PROXY_INDEX]
    PROXY_INDEX = (PROXY_INDEX + 1) % len(PROXIES)
    try:
        ip, port, user, password = proxy_line.split(':')
        proxy_url = f"http://{user}:{password}@{ip}:{port}"
        return {"http": proxy_url, "https": proxy_url}
    except Exception:
        return None

# C·∫•u h√¨nh giao di·ªán ch√≠nh
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")

class MainApp(ctk.CTk):
    def __init__(self, login_time, login_data):
        super().__init__()
        self.geometry("1000x600")
        self.title("ZaloChecker v2.0 | HVKDO - Li√™n h·ªá: Mr.Huynh 0971.325.870 ")
        self.resizable(False, False)
        self.login_data = login_data
        # Sidebar
        self.sidebar = ctk.CTkFrame(self, width=200, height=600, corner_radius=0, fg_color="#1E3A8A")
        self.sidebar.pack(side="left", fill="y")

        logo_label = ctk.CTkLabel(self.sidebar, text="ZaloChecker v2.0", font=("Arial", 18, "bold"), text_color="white")
        logo_label.pack(pady=20)
        logo_1label = ctk.CTkLabel(self.sidebar, text="Max Speed Turbo", font=("Arial", 12), text_color="white")
        logo_1label.place(x=15,y=40)

        self.icons = ["üè†", "üîç", "‚öôÔ∏è", "üìû", "üë§"]
        self.pages = ["Trang Ch·ªß", "Check Zalo", "C√†i ƒê·∫∑t", "Li√™n h·ªá", "T√†i Kho·∫£n"]
        for icon, page in zip(self.icons, self.pages):
            btn = ctk.CTkButton(self.sidebar,
                                text=f"{icon}  {page}",
                                width=180,
                                height=40,
                                corner_radius=10,
                                fg_color="#1E40AF",
                                command=lambda p=page: self.show_page(p))
            btn.pack(pady=10)

        # Th√™m label hi·ªÉn th·ªã th·ªùi gian (ƒë∆∞·ª£c l·∫•y t·ª´ API login)
        self.content_frame = ctk.CTkFrame(self, corner_radius=10, fg_color="white", width=680, height=600)
        self.content_frame.pack(expand=True, fill="both", padx=10, pady=10)

        self.pages_instances = {}  # L∆∞u l·∫°i instance c·ªßa t·ª´ng trang ƒë·ªÉ gi·ªØ d·ªØ li·ªáu
        self.current_page = None
        self.show_page("Trang Ch·ªß")

    def show_page(self, page_name):
        if self.current_page is not None:
            self.current_page.pack_forget()

        if page_name in self.pages_instances:
            self.current_page = self.pages_instances[page_name]
        else:
            if page_name == "Trang Ch·ªß":
                self.current_page = HomePage(self.content_frame)
            elif page_name == "Check Zalo":
                self.current_page = CheckZaloPage(self.content_frame)
            elif page_name == "C√†i ƒê·∫∑t":
                self.current_page = SettingsPage(self.content_frame)
            elif page_name == "Li√™n h·ªá":
                self.current_page = LienHePage(self.content_frame)
            elif page_name == "T√†i Kho·∫£n":
                # T·∫°o trang T√†i Kho·∫£n, truy·ªÅn login_data
                self.current_page = TaiKhoanPage(self.content_frame, self.login_data)
            else:
                self.current_page = DummyPage(self.content_frame, "Unknown")

            self.pages_instances[page_name] = self.current_page

        self.current_page.pack(expand=True, fill="both")


class HomePage(ctk.CTkFrame):
    def __init__(self, parent):
        super().__init__(parent, fg_color="white")
        # Trang ch·ªß: N·ªôi dung ƒë∆∞·ª£c t·∫°o theo ƒë√∫ng y√™u c·∫ßu c·ªßa b·∫°n
        # Title
        title = ctk.CTkLabel(self, text="C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ", 
                              font=ctk.CTkFont(size=16), text_color="black")
        title.place(x=20, y=20)

        title_link = ctk.CTkLabel(self, text="H·ªçc Vi·ªán Kinh Doanh Online", 
                                  font=ctk.CTkFont(size=16, weight="bold"), text_color="#0066cc")
        title_link.place(x=280, y=20)

        # Section 1
        section1_title = ctk.CTkLabel(self, text="1.V√¨ Sao Ch·ªçn ", 
                                      font=ctk.CTkFont(size=14, weight="bold"), text_color="black")
        section1_title.place(x=20, y=50)

        section1_title2 = ctk.CTkLabel(self, text="Ch√∫ng T√¥i", 
                                       font=ctk.CTkFont(size=14, weight="bold"), text_color="#0066cc")
        section1_title2.place(x=125, y=50)

        section1_title3 = ctk.CTkLabel(self, text="?", 
                                       font=ctk.CTkFont(size=16, weight="bold"), text_color="black")
        section1_title3.place(x=205, y=50)

        # Bullet points for section 1
        bullet1 = ctk.CTkLabel(self, text="- Tool d·ªÖ s·ª≠ d·ª•ng, nhanh g·ªçn m∆∞·ª£t v√† kh√¥ng y√™u c·∫ßu qu√° nhi·ªÅu v·ªÅ hi·ªáu nƒÉng, c·∫•u h√¨nh", 
                               font=ctk.CTkFont(size=14), text_color="black")
        bullet1.place(x=20, y=80)

        bullet2 = ctk.CTkLabel(self, text="- Lu√¥n l·∫Øng nghe ph·∫£n h·ªìi √Ω ki·∫øn c·ªßa kh√°ch h√†ng ƒë·ªÉ t·∫°o ra Tool ho√†n ch·ªânh nh·∫•t", 
                               font=ctk.CTkFont(size=14), text_color="black")
        bullet2.place(x=20, y=110)

        bullet3 = ctk.CTkLabel(self, text="- Check ƒë∆∞·ª£c nhi·ªÅu d·∫°ng:", 
                               font=ctk.CTkFont(size=14), text_color="black")
        bullet3.place(x=20, y=140)

        # Status types
        status1 = ctk.CTkLabel(self, text="+ Live", font=ctk.CTkFont(size=14, weight="bold"), text_color="#4CAF50")
        status1.place(x=40, y=170)
        status1_desc = ctk.CTkLabel(self, text="( C√≥ Zalo )", font=ctk.CTkFont(size=14), text_color="black")
        status1_desc.place(x=90, y=170)

        status2 = ctk.CTkLabel(self, text="+ Die", font=ctk.CTkFont(size=14, weight="bold"), text_color="#FF5722")
        status2.place(x=40, y=200)
        status2_desc = ctk.CTkLabel(self, text="( Kh√¥ng C√≥ Zalo )", font=ctk.CTkFont(size=14), text_color="black")
        status2_desc.place(x=90, y=200)

        status3 = ctk.CTkLabel(self, text="+ LOCKED", font=ctk.CTkFont(size=14, weight="bold"), text_color="#FFC107")
        status3.place(x=40, y=230)
        status3_desc = ctk.CTkLabel(self, text="( T√†i Kho·∫£n Kho√° )", font=ctk.CTkFont(size=14), text_color="black")
        status3_desc.place(x=120, y=230)

        status4 = ctk.CTkLabel(self, text="+ VHH", font=ctk.CTkFont(size=14, weight="bold"), text_color="#2196F3")
        status4.place(x=40, y=260)
        status4_desc = ctk.CTkLabel(self, text="( T√†i Kho·∫£n V√¥ Hi·ªáu Ho√° )", font=ctk.CTkFont(size=14), text_color="black")
        status4_desc.place(x=90, y=260)

        # Section 2
        section2_title = ctk.CTkLabel(self, text="2. B·∫£n C·∫£i Ti·∫øn M·ªõi ", 
                                      font=ctk.CTkFont(size=14, weight="bold"), text_color="black")
        section2_title.place(x=20, y=290)

        section2_title2 = ctk.CTkLabel(self, text="C√≥ Nh·ªØng G√¨?", 
                                       font=ctk.CTkFont(size=14, weight="bold"), text_color="#0066cc")
        section2_title2.place(x=163, y=290)

        # Bullet points for section 2
        bullet4 = ctk.CTkLabel(self, 
                               text="- D√πng AI Gi·∫£i Captcha t·ª± ƒë·ªông thay v√¨ ph·∫£i d√πng b√™n Kh√°c ti·∫øt ki·ªám chi ph√≠ t·ªëi ƒëa cho ng∆∞·ªùi d√πng", 
                               font=ctk.CTkFont(size=14), text_color="black")
        bullet4.place(x=20, y=320)

        bullet4_sub = ctk.CTkLabel(self, 
                                   text="(Do ch√∫ng t√¥i nghi√™n c·ª©u v√† ph√°t tri·ªÉn)", 
                                   font=ctk.CTkFont(size=14), text_color="#0066cc")
        bullet4_sub.place(x=40, y=350)

        bullet5 = ctk.CTkLabel(self, 
                               text="- Giao di·ªán ƒë·ªïi m·ªõi b·∫Øt m·∫Øt h∆°n, t·ªëi ∆∞u cho nh·ªØng m√°y c·∫•u h√¨nh th·∫•p", 
                               font=ctk.CTkFont(size=14), text_color="black")
        bullet5.place(x=20, y=380)

        bullet6 = ctk.CTkLabel(self, 
                               text="- C√≥ th·ªÉ xu·∫•t file l√†m 2 ƒë·ªãnh d·∫°ng: ", 
                               font=ctk.CTkFont(size=14), text_color="black")
        bullet6.place(x=20, y=410)

        file_format1 = ctk.CTkLabel(self, text="xlsx", font=ctk.CTkFont(size=14), text_color="#4CAF50")
        file_format1.place(x=250, y=410)

        and_text = ctk.CTkLabel(self, text="v√†", font=ctk.CTkFont(size=14), text_color="black")
        and_text.place(x=280, y=410)

        file_format2 = ctk.CTkLabel(self, text="txt", font=ctk.CTkFont(size=14), text_color="black")
        file_format2.place(x=300, y=410)

        format_detail1 = ctk.CTkLabel(self, text="( ", font=ctk.CTkFont(size=14), text_color="black")
        format_detail1.place(x=320, y=410)

        format_detail2 = ctk.CTkLabel(self, text="Excel", font=ctk.CTkFont(size=14), text_color="#4CAF50")
        format_detail2.place(x=330, y=410)

        format_detail3 = ctk.CTkLabel(self, text="v√†", font=ctk.CTkFont(size=14), text_color="black")
        format_detail3.place(x=370, y=410)

        format_detail4 = ctk.CTkLabel(self, text="Notepad", font=ctk.CTkFont(size=14), text_color="#ff3b30")
        format_detail4.place(x=390, y=410)

        format_detail5 = ctk.CTkLabel(self, text=")", font=ctk.CTkFont(size=14), text_color="black")
        format_detail5.place(x=450, y=410)

        bullet7 = ctk.CTkLabel(self, 
                               text="- T·ªëc ƒê·ªô Check S·ªë ƒêi·ªán Tho·∫°i ( ƒê∆∞·ª£c c·∫£i ti·∫øn m·∫°nh v√¨ ch√∫ng t√¥i hi·ªÉu r·∫±ng ƒë√¢y ch√≠nh l√† c·ªët l√µi ƒë√£", 
                               font=ctk.CTkFont(size=14), text_color="black", wraplength=520)
        bullet7.place(x=20, y=440)

        bullet7_cont = ctk.CTkLabel(self, 
                                    text="thay ƒë·ªïi ph∆∞∆°ng th·ª©c", 
                                    font=ctk.CTkFont(size=14), text_color="black")
        bullet7_cont.place(x=20, y=460)

        check_method = ctk.CTkLabel(self, 
                                    text="check m·ªõi nhanh h∆°n nh·∫π h∆°n", 
                                    font=ctk.CTkFont(size=14), text_color="#0066cc")
        check_method.place(x=160, y=460)

        and_text2 = ctk.CTkLabel(self, 
                                 text="v√†", 
                                 font=ctk.CTkFont(size=14), text_color="black")
        and_text2.place(x=350, y=460)

        savings = ctk.CTkLabel(self, 
                               text="ti·∫øt ki·ªám th·ªùi gian c≈©ng nh∆∞ t√†i nguy√™n", 
                               font=ctk.CTkFont(size=14), text_color="#0066cc")
        savings.place(x=370, y=460)

        # Footer
        footer_label1 = ctk.CTkLabel(self, 
                                     text="L·ªúI K·∫æT: ", 
                                     font=ctk.CTkFont(size=14, weight="bold"), text_color="black")
        footer_label1.place(x=20, y=490)

        footer_label2 = ctk.CTkLabel(self, 
                                     text="H·ªçc Vi·ªán Kinh Doanh Online", 
                                     font=ctk.CTkFont(size=14, weight="bold"), text_color="#0066cc")
        footer_label2.place(x=85, y=490)

        footer_message = ctk.CTkLabel(self, 
                                      text="G·ª≠i T·ªõi Kh√°ch H√†ng ƒê√£ Lu√¥n Tin D√πng S·∫£n Ph·∫©m L·ªùi C·∫£m ∆†n Ch√¢n Th√†nh Nh·∫•t,", 
                                      font=ctk.CTkFont(size=12), text_color="black")
        footer_message.place(x=289, y=490)

        footer_end = ctk.CTkLabel(self,
                                  text="Xin K√≠nh Quy kh√°ch Kinh Doanh Thu·∫≠n L·ª£i V√† G·∫∑t H√°i Nhi·ªÅu Th√†nh C√¥ng !", 
                                  font=ctk.CTkFont(size=16, weight="bold"), text_color="#0066cc")
        footer_end.place(x=20, y=520)

class LienHePage(ctk.CTkFrame):
    def __init__(self, parent):
        super().__init__(parent, fg_color="white")
        label_title = ctk.CTkLabel(self, text="H·ªçc vi·ªán Kinh doanh Online", font=("Arial", 25, "bold"), text_color="#0066cc")
        label_title.place(x=20, y=10)
        title1 = ctk.CTkLabel(self, text="H·ªçc Vi·ªán Kinh Doanh Online (HKDOL) l√† n·ªÅn t·∫£ng ƒë√†o t·∫°o chuy√™n s√¢u, cung c·∫•p ki·∫øn th·ª©c v√† k·ªπ nƒÉng", 
                              font=ctk.CTkFont(size=16), text_color="black")
        title1.place(x=20, y=40)
        title2 = ctk.CTkLabel(self, text="th·ª±c ti·ªÖn v·ªÅ kinh doanh tr·ª±c tuy·∫øn. H·ªçc vi·ªán h∆∞·ªõng ƒë·∫øn vi·ªác h·ªó tr·ª£ doanh nh√¢n, ch·ªß c·ª≠a h√†ng v√† c√°", 
                              font=ctk.CTkFont(size=16), text_color="black")
        title2.place(x=20, y=60)
        title3 = ctk.CTkLabel(self, text="nh√¢n mu·ªën ph√°t tri·ªÉn kinh doanh online m·ªôt c√°ch hi·ªáu qu·∫£ v√† b·ªÅn v·ªØng.", 
                              font=ctk.CTkFont(size=16), text_color="black")
        title3.place(x=20, y=80)
        titlea = ctk.CTkLabel(self, text="- Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o c·ªßa HKDOL bao g·ªìm nhi·ªÅu ch·ªß ƒë·ªÅ quan tr·ªçng nh∆∞ marketing online, qu·∫£ng c√°o", 
                              font=ctk.CTkFont(size=16), text_color="black")
        titlea.place(x=20, y=100)
        titlea1 = ctk.CTkLabel(self, text="Facebook Ads, Google Ads, SEO, x√¢y d·ª±ng th∆∞∆°ng hi·ªáu c√° nh√¢n, b√°n h√†ng ƒëa k√™nh v√† t·ªëi ∆∞u doanh thu.", 
                              font=ctk.CTkFont(size=16), text_color="black")
        titlea1.place(x=20, y=120)
        titlea2 = ctk.CTkLabel(self, text="H·ªçc vi√™n ƒë∆∞·ª£c h∆∞·ªõng d·∫´n theo l·ªô tr√¨nh b√†i b·∫£n, k·∫øt h·ª£p l√Ω thuy·∫øt v√† th·ª±c h√†nh th·ª±c t·∫ø.", 
                              font=ctk.CTkFont(size=16), text_color="black")
        titlea2.place(x=20, y=140)
        titlea3 = ctk.CTkLabel(self, text="- ƒê·ªôi ng≈© gi·∫£ng vi√™n t·∫°i HKDOL l√† nh·ªØng chuy√™n gia gi√†u kinh nghi·ªám trong lƒ©nh v·ª±c th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠", 
                              font=ctk.CTkFont(size=16), text_color="black")
        titlea3.place(x=20, y=160)
        titlea4 = ctk.CTkLabel(self, text="v√† ti·∫øp th·ªã s·ªë, gi√∫p h·ªçc vi√™n n·∫Øm b·∫Øt xu h∆∞·ªõng m·ªõi nh·∫•t v√† √°p d·ª•ng v√†o c√¥ng vi·ªác kinh doanh. Ngo√†i ra,", 
                              font=ctk.CTkFont(size=16), text_color="black")
        titlea4.place(x=20, y=180)
        titlea5 = ctk.CTkLabel(self, text="h·ªçc vi·ªán c√≤n cung c·∫•p c√°c bu·ªïi t∆∞ v·∫•n, h·ªó tr·ª£ c√° nh√¢n h√≥a ƒë·ªÉ ƒë·∫£m b·∫£o h·ªçc vi√™n c√≥ th·ªÉ tri·ªÉn khai chi·∫øn", 
                              font=ctk.CTkFont(size=16), text_color="black")
        titlea5.place(x=20, y=200)
        titlea6 = ctk.CTkLabel(self, text="l∆∞·ª£c kinh doanh m·ªôt c√°ch hi·ªáu qu·∫£.", 
                              font=ctk.CTkFont(size=16), text_color="black")
        titlea6.place(x=20, y=220)
        titlea7 = ctk.CTkLabel(self, text="- V·ªõi ph∆∞∆°ng ch√¢m H·ªçc ƒëi ƒë√¥i v·ªõi h√†nh, HKDOL cam k·∫øt mang ƒë·∫øn gi·∫£i ph√°p gi√°o d·ª•c th·ª±c ti·ªÖn, gi√∫p", 
                              font=ctk.CTkFont(size=16), text_color="black")
        titlea7.place(x=20, y=240)
        titlea8 = ctk.CTkLabel(self, text="h·ªçc vi√™n nhanh ch√≥ng ƒë·∫°t ƒë∆∞·ª£c k·∫øt qu·∫£ trong m√¥i tr∆∞·ªùng kinh doanh tr·ª±c tuy·∫øn ƒë·∫ßy c·∫°nh tranh.", 
                              font=ctk.CTkFont(size=16), text_color="black")
        titlea8.place(x=20, y=260)
        title4 = ctk.CTkLabel(self, text="Th√¥ng Tin Li√™n H·ªá:", 
                              font=ctk.CTkFont("Arial", 22, "bold"), text_color="#0066cc")
        title4.place(x=20, y=300)
        title5 = ctk.CTkLabel(self, text="Hotline: 0971325870", 
                              font=ctk.CTkFont(size=16), text_color="black")
        title5.place(x=20, y=325)
        title6 = ctk.CTkLabel(self, text="Zalo: 0971325870", 
                              font=ctk.CTkFont(size=16), text_color="black")
        title6.place(x=20, y=350)
        title7 = ctk.CTkLabel(self, text="Facebook: Nguy·ªÖn VƒÉn Huynh (Huynh Guru)", 
                              font=ctk.CTkFont(size=16), text_color="black")
        title7.place(x=20, y=375)
        title8 = ctk.CTkLabel(self, text="Group Facebook: H·ªçc Vi·ªán Kinh Doanh Online", 
                              font=ctk.CTkFont(size=16), text_color="black")
        title8.place(x=20, y=400)
        title9 = ctk.CTkLabel(self, text="Website: https://aff.hocvienkinhdoanhonline.com", 
                              font=ctk.CTkFont(size=16), text_color="black")
        title9.place(x=20, y=425)


class CheckZaloPage(ctk.CTkFrame):
    def __init__(self, parent):
        super().__init__(parent, fg_color="white")
        self.sdt_list = []
        self.results = []  # M·ªói ph·∫ßn t·ª≠ l√† dict c√≥ keys: sdt, ten, status, proxy
        self.stop_event = threading.Event()
        self.check_thread = None

        self.treeview_x = 0
        self.treeview_y = 0
        self.treeview_width = 800
        self.treeview_height = 450

        self.total_label_x = 0
        self.total_label_y = 555

        style = ttk.Style()
        style.theme_use("clam")
        style.configure("Treeview.Heading",
                        font=("Arial", 11),
                        background="#1E40AF",
                        foreground="white")
        style.configure("Treeview",
                        rowheight=20,
                        font=("Arial", 10))
        columns = ("stt", "sdt", "ten", "trang_thai", "proxy")
        self.table = ttk.Treeview(self, columns=columns, show="headings")
        self.table.heading("stt", text="STT")
        self.table.heading("sdt", text="SƒêT")
        self.table.heading("ten", text="T√äN")
        self.table.heading("trang_thai", text="TR·∫†NG TH√ÅI")
        self.table.heading("proxy", text="PROXY")
        self.table.column("stt", width=10, anchor="center")
        self.table.column("sdt", width=100, anchor="center")
        self.table.column("ten", width=100, anchor="center")
        self.table.column("trang_thai", width=90, anchor="center")
        self.table.column("proxy", width=300, anchor="center")
        self.table.place(x=self.treeview_x, y=self.treeview_y, width=self.treeview_width, height=self.treeview_height)

        self.table.bind("<Control-v>", self.on_ctrl_v)

        self.btn_start = ctk.CTkButton(self, text="‚ñ∂Ô∏è Ch·∫°y", fg_color="#1E40AF", command=self.start_check, width=150, height=40)
        self.btn_start.place(x=0, y=465)

        self.btn_stop = ctk.CTkButton(self, text="‚èπ D·ª´ng", fg_color="#1E40AF", command=self.stop_check, width=150, height=40)
        self.btn_stop.place(x=160, y=465)

        self.btn_input = ctk.CTkButton(self, text="üì• Nh·∫≠p File SƒêT", fg_color="#1E40AF", command=self.input_sdt, width=100, height=40)
        self.btn_input.place(x=320, y=465)

        self.btn_clear = ctk.CTkButton(self, text="üóë Clear", fg_color="#1E40AF", command=self.clear_sdt, width=100, height=40)
        self.btn_clear.place(x=440, y=465)

        self.btn_export_excel = ctk.CTkButton(self, text="üìä Xu·∫•t Excel", fg_color="#1E40AF", command=self.export_excel, width=100, height=40)
        self.btn_export_excel.place(x=550, y=465)

        self.btn_export_txt = ctk.CTkButton(self, text="üìù Xu·∫•t TXT", fg_color="#1E40AF", command=self.export_txt, width=100, height=40)
        self.btn_export_txt.place(x=660, y=465)

        self.total_frame = ctk.CTkFrame(self, fg_color="white")
        self.total_frame.place(x=self.total_label_x, y=self.total_label_y)
        self.lbl_total_all = ctk.CTkLabel(self.total_frame, text="T·ªïng: 0 |", font=ctk.CTkFont(size=16, weight="bold"), text_color="black")
        self.lbl_total_all.grid(row=0, column=0, padx=5)
        self.lbl_live = ctk.CTkLabel(self.total_frame, text="C√≥ Zalo: 0 |", font=ctk.CTkFont(size=16), text_color="green")
        self.lbl_live.grid(row=0, column=1, padx=5)
        self.lbl_die = ctk.CTkLabel(self.total_frame, text="Kh√¥ng X√°c ƒê·ªãnh: 0 |", font=ctk.CTkFont(size=16), text_color="red")
        self.lbl_die.grid(row=0, column=2, padx=5)
        self.lbl_locked = ctk.CTkLabel(self.total_frame, text="Kho√°: 0 |", font=ctk.CTkFont(size=16), text_color="#B39600")
        self.lbl_locked.grid(row=0, column=3, padx=5)
        self.lbl_vhh = ctk.CTkLabel(self.total_frame, text="VHH: 0 |", font=ctk.CTkFont(size=16), text_color="blue")
        self.lbl_vhh.grid(row=0, column=4, padx=5)

    def update_total_label(self):
        total = len(self.sdt_list)
        count_live = sum(1 for r in self.results if r.get("status") == "Live")
        count_die = sum(1 for r in self.results if r.get("status") in ["Die", "Kh√¥ng x√°c ƒë·ªãnh", "Captcha L·ªói"])
        count_locked = sum(1 for r in self.results if r.get("status") == "Kho√°")
        count_vhh = sum(1 for r in self.results if r.get("status") == "VHH")
        self.lbl_total_all.configure(text=f"T·ªïng: {total}")
        self.lbl_live.configure(text=f"C√≥ Zalo: {count_live}")
        self.lbl_die.configure(text=f"Kh√¥ng X√°c ƒê·ªãnh: {count_die}")
        self.lbl_locked.configure(text=f"Kho√°: {count_locked}")
        self.lbl_vhh.configure(text=f"VHH: {count_vhh}")

    def input_sdt(self):
        file_path = filedialog.askopenfilename(title="Ch·ªçn file SƒêT", filetypes=(("Text files", "*.txt"), ("All files", "*.*")))
        if file_path:
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    numbers = [line.strip() for line in f if line.strip()]
                self.sdt_list = numbers
                self.results = []
                for item in self.table.get_children():
                    self.table.delete(item)
                self.update_total_label()
                messagebox.showinfo("Th√¥ng b√°o", f"ƒê√£ th√™m {len(numbers)} s·ªë ƒëi·ªán tho·∫°i")
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file: {e}")

    def clear_sdt(self):
        self.sdt_list = []
        self.results = []
        for item in self.table.get_children():
            self.table.delete(item)
        self.update_total_label()

    def start_check(self):
        if self.check_thread and self.check_thread.is_alive():
            messagebox.showwarning("Ch√∫ √Ω", "Qu√° tr√¨nh ki·ªÉm tra ƒëang ch·∫°y")
            return
        if not self.sdt_list:
            messagebox.showwarning("Ch√∫ √Ω", "Ch∆∞a c√≥ s·ªë ƒëi·ªán tho·∫°i n√†o ƒë∆∞·ª£c nh·∫≠p")
            return
        self.stop_event.clear()
        self.check_thread = threading.Thread(target=self.check_task)
        self.check_thread.start()

    def stop_check(self):
        self.stop_event.set()

    def check_task(self):
        for idx, sdt in enumerate(self.sdt_list, start=1):
            if self.stop_event.is_set():
                break
            result = check_zalo_account(sdt)
            self.results.append({"sdt": sdt,
                                 "ten": result.get("ten", ""),
                                 "status": result.get("status", ""),
                                 "proxy": result.get("proxy", "KH√îNG D√ôNG PROXY")})
            self.table.insert("", "end", values=(idx, sdt, result.get("ten", ""), result.get("status", ""), result.get("proxy", "KH√îNG D√ôNG PROXY")))
            self.update_total_label()
            self.table.yview_moveto(1)

    def export_excel(self):
        live_results = [r for r in self.results if r.get("status") == "Live"]
        if not live_results:
            messagebox.showwarning("Ch√∫ √Ω", "Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i live n√†o")
            return
        file_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=(("Excel files", "*.xlsx"),))
        if file_path:
            wb = openpyxl.Workbook()
            ws = wb.active
            ws.title = "Live SDT"
            ws.append(["SƒêT", "NAME"])
            for r in live_results:
                ws.append([r.get("sdt"), r.get("ten")])
            try:
                wb.save(file_path)
                messagebox.showinfo("Th√†nh c√¥ng", f"Xu·∫•t Excel th√†nh c√¥ng: {file_path}")
            except Exception as e:
                messagebox.showerror("L·ªói", f"L·ªói khi l∆∞u file: {e}")

    def export_txt(self):
        live_results = [r for r in self.results if r.get("status") == "Live"]
        if not live_results:
            messagebox.showwarning("Ch√∫ √Ω", "Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i live n√†o")
            return
        file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=(("Text files", "*.txt"),))
        if file_path:
            try:
                with open(file_path, "w", encoding="utf-8") as f:
                    for r in live_results:
                        f.write(r.get("sdt") + "\n")
                messagebox.showinfo("Th√†nh c√¥ng", f"Xu·∫•t TXT th√†nh c√¥ng: {file_path}")
            except Exception as e:
                messagebox.showerror("L·ªói", f"L·ªói khi l∆∞u file: {e}")

    def on_ctrl_v(self, event):
        try:
            clip = self.clipboard_get()
        except Exception:
            return
        numbers = [x.strip() for x in clip.splitlines() if x.strip()]
        if not numbers:
            return
        ans = messagebox.askokcancel("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën d√°n {len(numbers)} s·ªë ƒëi·ªán tho·∫°i?")
        if ans:
            self.sdt_list.extend(numbers)
            self.update_total_label()
            messagebox.showinfo("Th√¥ng b√°o", f"ƒê√£ th√™m {len(numbers)} s·ªë ƒëi·ªán tho·∫°i t·ª´ clipboard")
class TaiKhoanPage(ctk.CTkFrame):
    def __init__(self, parent, login_data):
        super().__init__(parent, fg_color="white")
        self.login_data = login_data
        # T·∫°o layout d·∫°ng grid
        self.columnconfigure(0, weight=1)
        self.columnconfigure(1, weight=2)

        # ----- D√íNG 1: H·ªç v√† T√™n -----
        label_name = ctk.CTkLabel(self, text="H·ªç & T√™n:", font=("Arial", 14, "bold"), text_color="#333")
        label_name.grid(row=0, column=0, padx=10, pady=10, sticky="e")

        val_name = ctk.CTkLabel(self, text=self.login_data.get("name", ""), font=("Arial", 14))
        val_name.grid(row=0, column=1, padx=10, pady=10, sticky="w")

        # ----- D√íNG 2: IP MAC (ho·∫∑c ƒë·ªãa ch·ªâ MAC) -----
        label_mac = ctk.CTkLabel(self, text="IP MAC:", font=("Arial", 14, "bold"), text_color="#333")
        label_mac.grid(row=1, column=0, padx=10, pady=10, sticky="e")

        val_mac = ctk.CTkLabel(self, text=self.login_data.get("mac", ""), font=("Arial", 14))
        val_mac.grid(row=1, column=1, padx=10, pady=10, sticky="w")

        # ----- D√íNG 3: API KEY -----
        label_key = ctk.CTkLabel(self, text="API KEY:", font=("Arial", 14, "bold"), text_color="#333")
        label_key.grid(row=2, column=0, padx=10, pady=10, sticky="e")

        val_key = ctk.CTkLabel(self, text=self.login_data.get("key", ""), font=("Arial", 14))
        val_key.grid(row=2, column=1, padx=10, pady=10, sticky="w")

        # ----- D√íNG 4: QUY·ªÄN H·∫†N -----
        label_role = ctk.CTkLabel(self, text="QUY·ªÄN H·∫†N:", font=("Arial", 14, "bold"), text_color="#333")
        label_role.grid(row=3, column=0, padx=10, pady=10, sticky="e")

        val_role = ctk.CTkLabel(self, text=self.login_data.get("Role", ""), font=("Arial", 14))
        val_role.grid(row=3, column=1, padx=10, pady=10, sticky="w")

        # ----- D√íNG 5: Th·ªùi Gian -----
        label_time = ctk.CTkLabel(self, text="Th·ªùi Gian:", font=("Arial", 14, "bold"), text_color="#333")
        label_time.grid(row=4, column=0, padx=10, pady=10, sticky="e")

        val_time = ctk.CTkLabel(self, text=self.login_data.get("time", ""), font=("Arial", 14))
        val_time.grid(row=4, column=1, padx=10, pady=10, sticky="w")

        # ----- D√íNG 6: K√≠ch Ho·∫°t -----
        label_active = ctk.CTkLabel(self, text="K√≠ch Ho·∫°t:", font=("Arial", 14, "bold"), text_color="#333")
        label_active.grid(row=5, column=0, padx=10, pady=10, sticky="e")

        # ƒê·ªïi text tu·ª≥ theo gi√° tr·ªã "active"
        if self.login_data.get("Active", "no").lower() == "yes":
            active_text = "ƒê√£ K√≠ch Ho·∫°t"
            active_color = "green"
        else:
            active_text = "Ch∆∞a K√≠ch Ho·∫°t"
            active_color = "red"

        val_active = ctk.CTkLabel(self, text=active_text, font=("Arial", 14, "bold"), text_color=active_color)
        val_active.grid(row=5, column=1, padx=10, pady=10, sticky="w")

        # ----- N√öT ƒêƒÇNG XU·∫§T -----
        logout_button = ctk.CTkButton(
            self, 
            text="ƒêƒÇNG XU·∫§T", 
            width=200, 
            height=40, 
            fg_color="#FF3333",
            command=self.logout
        )
        logout_button.place(x=220, y=325)

    def logout(self):
        """ƒê√≥ng to√†n b·ªô ·ª©ng d·ª•ng (ho·∫∑c quay l·∫°i trang ƒëƒÉng nh·∫≠p tu·ª≥ √Ω)."""
        result = messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?")
        if result:
            self._root().destroy()  # ƒê√≥ng c·ª≠a s·ªï ch√≠nh
            # Ho·∫∑c b·∫°n c√≥ th·ªÉ m·ªü l·∫°i c·ª≠a s·ªï login, tu·ª≥ logic b·∫°n mu·ªën


class SettingsPage(ctk.CTkFrame):
    def __init__(self, parent):
        super().__init__(parent, fg_color="white")
        self.cookie_file_path = ""
        self.proxy_file_path = ""
        if os.path.exists("config.json"):
            try:
                with open("config.json", "r", encoding="utf-8") as f:
                    config = json.load(f)
                    self.cookie_file_path = config.get("cookie_file", "")
                    self.proxy_file_path = config.get("proxy_file", "")
                    use_proxy_flag = config.get("use_proxy", False)
            except:
                use_proxy_flag = False
        else:
            use_proxy_flag = False

        self.btn_input_cookie = ctk.CTkButton(self, text="üì• Nh·∫≠p File Cookie", fg_color="#1E40AF", command=self.input_cookie, width=150, height=40)
        self.btn_input_cookie.place(x=20, y=20)
        self.lbl_cookie_path = ctk.CTkLabel(self, text=self.cookie_file_path if self.cookie_file_path else "No file selected", font=ctk.CTkFont(size=14))
        self.lbl_cookie_path.place(x=180, y=23)

        self.btn_input_proxy = ctk.CTkButton(self, text="üì• Nh·∫≠p File Proxy", fg_color="#1E40AF", command=self.input_proxy, width=150, height=40)
        self.btn_input_proxy.place(x=20, y=70)
        self.lbl_proxy_path = ctk.CTkLabel(self, text=self.proxy_file_path if self.proxy_file_path else "No file selected", font=ctk.CTkFont(size=14))
        self.lbl_proxy_path.place(x=180, y=73)

        self.chk_use_proxy = ctk.CTkCheckBox(self, text="C√≥ s·ª≠ d·ª•ng proxy kh√¥ng?")
        self.chk_use_proxy.place(x=20, y=120)
        self.luuy = ctk.CTkLabel(self, text="( L∆∞u √Ω: S·ª≠ d·ª•ng proxy s·∫Ω gi√∫p check s·ªë ƒëi·ªán tho·∫°i ·ªïn ƒë·ªãnh h∆°n )", font=ctk.CTkFont(size=14), text_color="red")
        self.luuy.place(x=210, y=120)
        if use_proxy_flag:
            self.chk_use_proxy.select()
        else:
            self.chk_use_proxy.deselect()

        self.btn_save = ctk.CTkButton(self, text="Save", fg_color="#1E40AF", command=self.save_settings)
        self.btn_save.place(x=20, y=170)

    def input_cookie_file():
    file_path = filedialog.askopenfilename(title="Ch·ªçn file cookie (.txt)", filetypes=[("Text files", "*.txt")])
    if file_path:
        with open(file_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
        if len(lines) < 2:
            messagebox.showerror("L·ªói", "File kh√¥ng ƒë·ªß d·ªØ li·ªáu (c·∫ßn 2 d√≤ng)")
        else:
            global ORIGINAL_COOKIE, ORIGINAM_TOKEN
            ORIGINAL_COOKIE = lines[0].strip()
            ORIGINAM_TOKEN = lines[1].strip()
            messagebox.showinfo("Th√†nh c√¥ng", "Cookie v√† Token ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t")


    def input_proxy(self):
        file_path = filedialog.askopenfilename(title="Ch·ªçn file proxy", filetypes=(("Text files", "*.txt"), ("All files", "*.*")))
        if file_path:
            self.proxy_file_path = file_path
            self.lbl_proxy_path.configure(text=file_path)

    def save_settings(self):
        use_proxy_flag = self.chk_use_proxy.get()
        if use_proxy_flag:
            if self.proxy_file_path:
                try:
                    with open(self.proxy_file_path, "r", encoding="utf-8") as f:
                        proxy_lines = [line.strip() for line in f if line.strip()]
                    global PROXIES, USE_PROXY, PROXY_INDEX
                    PROXIES = proxy_lines
                    USE_PROXY = True
                    PROXY_INDEX = 0
                except Exception as e:
                    messagebox.showerror("L·ªói", f"L·ªói khi ƒë·ªçc file proxy: {e}")
                    return
            else:
                messagebox.showerror("L·ªói", "Ch∆∞a ch·ªçn file proxy")
                return
        else:
            USE_PROXY = False

        config = {
            "cookie_file": self.cookie_file_path,
            "proxy_file": self.proxy_file_path,
            "use_proxy": use_proxy_flag
        }
        try:
            with open("config.json", "w", encoding="utf-8") as f:
                json.dump(config, f, ensure_ascii=False, indent=4)
            messagebox.showinfo("Th√†nh c√¥ng", "C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi l∆∞u c√†i ƒë·∫∑t: {e}")

HEADERS_INFO = {
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8",
    "Accept-Encoding": "gzip, deflate, br, zstd",
    "Accept-Language": "vi-VN,vi;q=0.9",
    "Connection": "keep-alive",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                  "(KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"
}

def get_zalo_info(sdt, captcha_uuid=None, proxy=None):
    url = f"https://zalo.me/{sdt}"
    cookie = ORIGINAL_COOKIE
    if captcha_uuid:
        cookie += f" z-captcha-response={captcha_uuid}"
    headers = HEADERS_INFO.copy()
    headers["Cookie"] = cookie
    try:
        if proxy:
            response = requests.get(url, headers=headers, proxies=proxy, timeout=10)
        else:
            response = requests.get(url, headers=headers, timeout=10)
    except Exception:
        return {"captcha_required": False, "html": ""}
    html = response.text
    if "ƒê·ªÉ tr√°nh vi·ªác spam hay thu th·∫≠p th√¥ng tin tr√°i ph√©p" in html:
        return {"captcha_required": True, "html": html}
    else:
        return {"captcha_required": False, "html": html}

def get_captcha(proxy=None):
    url = "https://zcaptcha.api.zaloapp.com/api/get-captcha"
    headers = {
        "Accept": "application/json, text/plain, */*",
        "Content-Type": "application/json",
        "Cookie": ORIGINAL_COOKIE,
        "Accept-Language": "vi-VN,vi;q=0.9",
        "csrf-token": ORIGINAM_TOKEN
    }
    data = {}
    try:
        if proxy:
            resp = requests.post(url, headers=headers, json=data, proxies=proxy, timeout=10)
        else:
            resp = requests.post(url, headers=headers, json=data, timeout=10)
    except Exception:
        return None
    if resp.status_code == 200:
        result = resp.json()
        if result.get("error_code") == 0:
            data = result.get("data", {})
            image_data = data.get("image", {})
            return {
                "url": image_data.get("url"),
                "token": image_data.get("token"),
                "question": data.get("question")
            }
    return None

def solve_captcha(image_url, question, proxy=None):
    try:
        if proxy:
            image_resp = requests.get(image_url, proxies=proxy, timeout=10)
        else:
            image_resp = requests.get(image_url, timeout=10)
    except Exception:
        return None
    if image_resp.status_code != 200:
        return None
    base64_image = base64.b64encode(image_resp.content).decode("utf-8")
    API_KEY = "AIzaSyCfnPZg0yVDm9YHP2SoeRNxRJACvuwuXtE"
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={API_KEY}"
    headers = {"Content-Type": "application/json"}
    text_prompt = (f"T√¥i c·∫ßn b·∫°n tr·∫£ l·ªùi b·∫±ng ti·∫øng vi·ªát: {question}, trong ·∫£nh s·∫Ω c√≥ t·ªïng 9 b·ª©c ·∫£nh v√† b·ª©c ·∫£nh b·∫°n ch·ªçn l·∫ßn l∆∞·ª£t l√† s·ªë m·∫•y, "
                   "t√¥i c·∫ßn b·∫°n tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh ch·ªâ hi·ªÉn th·ªã m·ªói s·ªë th·ª© t·ª± b·ª©c ·∫£nh m√† b·∫°n ch·ªçn")
    data = {
        "contents": [
            {
                "parts": [
                    {"text": text_prompt},
                    {"inline_data": {"mime_type": "image/png", "data": base64_image}}
                ]
            }
        ]
    }
    try:
        if proxy:
            resp = requests.post(url, headers=headers, json=data, proxies=proxy, timeout=10)
        else:
            resp = requests.post(url, headers=headers, json=data, timeout=10)
    except Exception:
        return None
    if resp.status_code == 200:
        try:
            answer = resp.json()["candidates"][0]["content"]["parts"][0]["text"]
            return answer.strip()
        except (KeyError, IndexError):
            return None
    return None

def check_captcha(token, answer_str, proxy=None):
    try:
        selected = [int(x) for x in answer_str.replace(" ", "").split(",")]
    except Exception:
        return None
    answers = [(True if pos in selected else False) for pos in range(1, 10)]
    url = "https://zcaptcha.api.zaloapp.com/api/check-captcha"
    headers = {
        "Accept": "application/json, text/plain, */*",
        "Accept-Encoding": "gzip, deflate, br, zstd",
        "Accept-Language": "vi-VN,vi;q=0.9",
        "Connection": "keep-alive",
        "Content-Type": "application/json",
        "Cookie": ORIGINAL_COOKIE,
        "csrf-token": ORIGINAM_TOKEN,
        "Host": "zcaptcha.api.zaloapp.com",
        "Origin": "https://zcaptcha.api.zaloapp.com",
        "Referer": "https://zcaptcha.api.zaloapp.com/zcaptcha-challenge?appId=3032357805345395173&lang=vi",
        "sec-ch-ua": '"Chromium";v="134", "Not:A-Brand";v="24", "Google Chrome";v="134"',
        "sec-ch-ua-mobile": "?0",
        "sec-ch-ua-platform": '"Windows"',
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin",
        "Sec-Fetch-Storage-Access": "active",
        "User-Agent": HEADERS_INFO["User-Agent"]
    }
    payload = {"answers": answers, "token": token}
    try:
        if proxy:
            resp = requests.post(url, headers=headers, data=json.dumps(payload), proxies=proxy, timeout=10)
        else:
            resp = requests.post(url, headers=headers, data=json.dumps(payload), timeout=10)
    except Exception:
        return None
    if resp.status_code == 200:
        result = resp.json()
        if result.get("error_code") == 0 and result.get("data", {}).get("pass") is True:
            uuid_value = result["data"].get("uuid")
            with open("uuid.txt", "w", encoding="utf-8") as f:
                f.write(uuid_value)
            return uuid_value
    return None

def check_zalo_account(sdt):
    # N·∫øu s·ª≠ d·ª•ng proxy, l·∫•y proxy m·ªõi cho m·ªói request
    proxy_used = get_next_proxy() if USE_PROXY else None
    info = get_zalo_info(sdt, proxy=proxy_used)
    if not info["captcha_required"]:
        html = info["html"]
        if '<meta property="og:title" content="Zalo - T√†i kho·∫£n b·ªã kh√≥a" />' in html:
            return {"status": "Kho√°", "ten": "", "proxy": proxy_used["http"] if proxy_used else "KH√îNG D√ôNG PROXY"}
        elif '<figcaption>T√†i kho·∫£n n√†y t·∫°m th·ªùi kh√¥ng th·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y</figcaption>' in html:
            return {"status": "VHH", "ten": "", "proxy": proxy_used["http"] if proxy_used else "KH√îNG D√ôNG PROXY"}
        elif '<figcaption>T√†i kho·∫£n n√†y kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng cho ph√©p t√¨m ki·∫øm</figcaption>' in html:
            return {"status": "Die", "ten": "", "proxy": proxy_used["http"] if proxy_used else "KH√îNG D√ôNG PROXY"}
        else:
            match = re.search(r'<meta property="og:title" content="Zalo - (.+?)" />', html)
            if match:
                ten = match.group(1)
                return {"status": "Live", "ten": ten, "proxy": proxy_used["http"] if proxy_used else "KH√îNG D√ôNG PROXY"}
            else:
                return {"status": "Kh√¥ng x√°c ƒë·ªãnh", "ten": "", "proxy": proxy_used["http"] if proxy_used else "KH√îNG D√ôNG PROXY"}
    else:
        # N·∫øu captcha y√™u c·∫ßu, s·ª≠ d·ª•ng proxy ri√™ng cho t·ª´ng b∆∞·ªõc
        proxy_captcha = get_next_proxy() if USE_PROXY else None
        cap_data = get_captcha(proxy=proxy_captcha)
        if not cap_data:
            return {"status": "Captcha L·ªói", "ten": "", "proxy": proxy_captcha["http"] if proxy_captcha else "KH√îNG D√ôNG PROXY"}
        image_url = cap_data["url"]
        question = cap_data["question"]
        token = cap_data["token"]
        proxy_solve = get_next_proxy() if USE_PROXY else None
        answer_str = solve_captcha(image_url, question, proxy=proxy_solve)
        if not answer_str:
            return {"status": "Captcha L·ªói", "ten": "", "proxy": proxy_solve["http"] if proxy_solve else "KH√îNG D√ôNG PROXY"}
        proxy_check = get_next_proxy() if USE_PROXY else None
        uuid_value = check_captcha(token, answer_str, proxy=proxy_check)
        if not uuid_value:
            return {"status": "Captcha L·ªói", "ten": "", "proxy": proxy_check["http"] if proxy_check else "KH√îNG D√ôNG PROXY"}
        # Sau captcha, l·∫•y proxy m·ªõi cho l·∫ßn request cu·ªëi
        proxy_final = get_next_proxy() if USE_PROXY else None
        info = get_zalo_info(sdt, captcha_uuid=uuid_value, proxy=proxy_final)
        html = info["html"]
        if '<meta property="og:title" content="Zalo - T√†i kho·∫£n b·ªã kh√≥a" />' in html:
            return {"status": "Kho√°", "ten": "", "proxy": proxy_final["http"] if proxy_final else "KH√îNG D√ôNG PROXY"}
        elif '<figcaption>T√†i kho·∫£n n√†y t·∫°m th·ªùi kh√¥ng th·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y</figcaption>' in html:
            return {"status": "VHH", "ten": "", "proxy": proxy_final["http"] if proxy_final else "KH√îNG D√ôNG PROXY"}
        elif '<figcaption>T√†i kho·∫£n n√†y kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng cho ph√©p t√¨m ki·∫øm</figcaption>' in html:
            return {"status": "Die", "ten": "", "proxy": proxy_final["http"] if proxy_final else "KH√îNG D√ôNG PROXY"}
        else:
            match = re.search(r'<meta property="og:title" content="Zalo - (.+?)" />', html)
            if match:
                ten = match.group(1)
                return {"status": "Live", "ten": ten, "proxy": proxy_final["http"] if proxy_final else "KH√îNG D√ôNG PROXY"}
            else:
                return {"status": "Kh√¥ng x√°c ƒë·ªãnh", "ten": "", "proxy": proxy_final["http"] if proxy_final else "KH√îNG D√ôNG PROXY"}




def read_sdt_from_file(filename):
    with open(filename, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

# ---------------------------
# CH·∫†Y CH∆Ø∆†NG TR√åNH
# ---------------------------
# T·∫†O C·ª¨A S·ªî LOGIN
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")
login_window = ctk.CTk()  
login_window.title("Zalo Checker v2.0 | ƒêƒÉng Nh·∫≠p")
login_window.geometry("700x500")
login_window.resizable(False, False)
if os.path.exists("logo.ico"):
    login_window.iconbitmap("logo.ico")

# Khung b√™n tr√°i (form ƒëƒÉng nh·∫≠p)
left_frame = ctk.CTkFrame(master=login_window, width=300, corner_radius=0)
left_frame.pack(side="left", fill="both", expand=False)
left_frame.configure(fg_color="white")

if os.path.exists("logo.png"):
    logo_image = ctk.CTkImage(
        dark_image=Image.open("logo.png"),
        size=(90, 70)
    )
    logo_label = ctk.CTkLabel(left_frame, image=logo_image, text="")
    logo_label.place(x=15, y=90)

title_label = ctk.CTkLabel(
    left_frame,
    text="ƒêƒÉng Nh·∫≠p !",
    font=("Arial", 24, "bold"),
    text_color="#333"
)
title_label.place(x=20, y=170)

subtitle_label = ctk.CTkLabel(
    left_frame,
    text="H·ªçc Vi·ªán Kinh Doanh Online H√¢n H·∫°nh Ph·ª•c V·ª• B·∫°n",
    font=("Arial", 11, "italic"),
    text_color="#666"
)
subtitle_label.place(x=20, y=198)

saved_key = load_key_from_file()
key_entry = ctk.CTkEntry(
    left_frame,
    placeholder_text="Nh·∫≠p key c·ªßa b·∫°n",
    width=240,
    height=35,
    corner_radius=8
)
key_entry.place(x=20, y=240)
key_entry.insert(0, saved_key)

mac_label = ctk.CTkLabel(left_frame, text="ƒê·ªãa Ch·ªâ MAC:", font=("Arial", 12), text_color="#333")
mac_label.place(x=20, y=280)

mac_address = get_mac_address()
mac_display = ctk.CTkLabel(
    left_frame,
    text=mac_address,
    font=("Arial", 12, "bold"),
    text_color="Green",
    cursor="hand2"
)
mac_display.place(x=100, y=280)
mac_display.bind("<Button-1>", lambda e: copy_to_clipboard(mac_address, login_window))

save_key_var = ctk.BooleanVar(value=bool(saved_key))
save_key_chk = ctk.CTkCheckBox(
    master=left_frame,
    text="L∆∞u key cho l·∫ßn sau",
    variable=save_key_var,
    text_color="#333"
)
save_key_chk.place(x=20, y=320)

login_button = ctk.CTkButton(
    master=left_frame,
    text="ƒêƒÇNG NH·∫¨P",
    width=240,
    height=40,
    corner_radius=8,
    fg_color="#0072FF",
    text_color="white",
    font=("Arial", 14, "bold"),
    command=lambda: check_key(login_window)  # Truy·ªÅn tham chi·∫øu c·ª≠a s·ªï
)
login_button.place(x=20, y=360)

# Khung b√™n ph·∫£i (·∫£nh banner)
right_frame = ctk.CTkFrame(master=login_window, corner_radius=0)
right_frame.pack(side="right", fill="both", expand=True)
right_frame.configure(fg_color="white")

if os.path.exists("banner.png"):
    bg_image = ctk.CTkImage(
        dark_image=Image.open("banner.png"),
        size=(380, 480)
    )
    bg_label = ctk.CTkLabel(right_frame, image=bg_image, text="")
    bg_label.place(x=0, y=0)
else:
    bg_label = ctk.CTkLabel(
        right_frame,
        text="Zalo Checker v2.0\nH·ªçc Vi·ªán Kinh Doanh Online",
        font=("Arial", 24, "bold"),
        text_color="#004F9F"
    )
    bg_label.place(x=100, y=50)

login_window.mainloop()
